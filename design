--[=[
 d888b  db    db d888888b      .d888b.      db      db    db  .d8b.  
88' Y8b 88    88   `88'        VP  `8D      88      88    88 d8' `8b 
88      88    88    88            odD'      88      88    88 88ooo88 
88  ooo 88    88    88          .88'        88      88    88 88~~~88 
88. ~8~ 88b  d88   .88.        j88.         88booo. 88b  d88 88   88    @uniquadev
 Y888P  ~Y8888P' Y888888P      888888D      Y88888P ~Y8888P' YP   YP  CONVERTER 
]=]

-- Instances: 53 | Scripts: 14 | Modules: 0 | Tags: 0
local G2L = {};

-- ReplicatedFirst.ScreenGui
G2L["1"] = Instance.new("ScreenGui", game:GetService("Players").LocalPlayer:WaitForChild("PlayerGui"));



-- ReplicatedFirst.ScreenGui.LocalScript
G2L["2"] = Instance.new("LocalScript", G2L["1"]);



-- ReplicatedFirst.ScreenGui.Fanta
G2L["3"] = Instance.new("Frame", G2L["1"]);
G2L["3"]["BorderSizePixel"] = 0;
G2L["3"]["BackgroundColor3"] = Color3.fromRGB(52, 68, 110);
G2L["3"]["Size"] = UDim2.new(0, 587, 0, 412);
G2L["3"]["Position"] = UDim2.new(0.10422, 0, 0.1961, 0);
G2L["3"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["3"]["Name"] = [[Fanta]];
G2L["3"]["BackgroundTransparency"] = 0.1;


-- ReplicatedFirst.ScreenGui.Fanta.aim
G2L["4"] = Instance.new("TextButton", G2L["3"]);
G2L["4"]["BorderSizePixel"] = 0;
G2L["4"]["TextSize"] = 14;
G2L["4"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["4"]["BackgroundColor3"] = Color3.fromRGB(204, 116, 9);
G2L["4"]["FontFace"] = Font.new([[rbxasset://fonts/families/Ubuntu.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["4"]["Size"] = UDim2.new(0, 113, 0, 67);
G2L["4"]["BackgroundTransparency"] = 0.25;
G2L["4"]["Name"] = [[aim]];
G2L["4"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["4"]["Text"] = [[Aim]];
G2L["4"]["Position"] = UDim2.new(0.01533, 0, 0.04612, 0);


-- ReplicatedFirst.ScreenGui.Fanta.aim.LocalScript
G2L["5"] = Instance.new("LocalScript", G2L["4"]);



-- ReplicatedFirst.ScreenGui.Fanta.visual
G2L["6"] = Instance.new("TextButton", G2L["3"]);
G2L["6"]["BorderSizePixel"] = 0;
G2L["6"]["TextSize"] = 14;
G2L["6"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["6"]["BackgroundColor3"] = Color3.fromRGB(204, 116, 9);
G2L["6"]["FontFace"] = Font.new([[rbxasset://fonts/families/Ubuntu.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["6"]["Size"] = UDim2.new(0, 113, 0, 67);
G2L["6"]["BackgroundTransparency"] = 0.25;
G2L["6"]["Name"] = [[visual]];
G2L["6"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["6"]["Text"] = [[Visuals]];
G2L["6"]["Position"] = UDim2.new(0.01533, 0, 0.24515, 0);


-- ReplicatedFirst.ScreenGui.Fanta.visual.LocalScript
G2L["7"] = Instance.new("LocalScript", G2L["6"]);



-- ReplicatedFirst.ScreenGui.Fanta.misc
G2L["8"] = Instance.new("TextButton", G2L["3"]);
G2L["8"]["BorderSizePixel"] = 0;
G2L["8"]["TextSize"] = 14;
G2L["8"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["8"]["BackgroundColor3"] = Color3.fromRGB(204, 116, 9);
G2L["8"]["FontFace"] = Font.new([[rbxasset://fonts/families/Ubuntu.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["8"]["Size"] = UDim2.new(0, 113, 0, 67);
G2L["8"]["BackgroundTransparency"] = 0.25;
G2L["8"]["Name"] = [[misc]];
G2L["8"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["8"]["Text"] = [[Misc]];
G2L["8"]["Position"] = UDim2.new(0.01533, 0, 0.44903, 0);


-- ReplicatedFirst.ScreenGui.Fanta.misc.LocalScript
G2L["9"] = Instance.new("LocalScript", G2L["8"]);



-- ReplicatedFirst.ScreenGui.Fanta.hvhTab
G2L["a"] = Instance.new("TextButton", G2L["3"]);
G2L["a"]["BorderSizePixel"] = 0;
G2L["a"]["TextSize"] = 14;
G2L["a"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["a"]["BackgroundColor3"] = Color3.fromRGB(204, 116, 9);
G2L["a"]["FontFace"] = Font.new([[rbxasset://fonts/families/Ubuntu.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["a"]["Size"] = UDim2.new(0, 113, 0, 67);
G2L["a"]["BackgroundTransparency"] = 0.25;
G2L["a"]["Name"] = [[hvhTab]];
G2L["a"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["a"]["Text"] = [[HvH]];
G2L["a"]["Position"] = UDim2.new(0.01533, 0, 0.65291, 0);


-- ReplicatedFirst.ScreenGui.Fanta.hvhTab.LocalScript
G2L["b"] = Instance.new("LocalScript", G2L["a"]);



-- ReplicatedFirst.ScreenGui.Fanta.UIStroke
G2L["c"] = Instance.new("UIStroke", G2L["3"]);
G2L["c"]["Thickness"] = 0.6;
G2L["c"]["Color"] = Color3.fromRGB(255, 255, 255);


-- ReplicatedFirst.ScreenGui.Fanta.topbar
G2L["d"] = Instance.new("Frame", G2L["3"]);
G2L["d"]["BorderSizePixel"] = 0;
G2L["d"]["BackgroundColor3"] = Color3.fromRGB(204, 116, 9);
G2L["d"]["Size"] = UDim2.new(0, 587, 0, 23);
G2L["d"]["Position"] = UDim2.new(0, 0, -0.05583, 0);
G2L["d"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["d"]["Name"] = [[topbar]];
G2L["d"]["BackgroundTransparency"] = 0.2;


-- ReplicatedFirst.ScreenGui.Fanta.topbar.UIStroke
G2L["e"] = Instance.new("UIStroke", G2L["d"]);
G2L["e"]["Thickness"] = 0.6;
G2L["e"]["Color"] = Color3.fromRGB(255, 255, 255);


-- ReplicatedFirst.ScreenGui.Fanta.topbar.TextLabel
G2L["f"] = Instance.new("TextLabel", G2L["d"]);
G2L["f"]["BorderSizePixel"] = 0;
G2L["f"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["f"]["TextSize"] = 14;
G2L["f"]["FontFace"] = Font.new([[rbxasset://fonts/families/Ubuntu.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["f"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["f"]["BackgroundTransparency"] = 1;
G2L["f"]["Size"] = UDim2.new(0, 200, 0, 50);
G2L["f"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["f"]["Text"] = [[Fanta.Crim]];
G2L["f"]["Position"] = UDim2.new(0.32879, 0, -0.61476, 0);


-- ReplicatedFirst.ScreenGui.Fanta.visTab
G2L["10"] = Instance.new("Frame", G2L["3"]);
G2L["10"]["Visible"] = false;
G2L["10"]["BorderSizePixel"] = 0;
G2L["10"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["10"]["Size"] = UDim2.new(0, 434, 0, 363);
G2L["10"]["Position"] = UDim2.new(0.23169, 0, 0.04612, 0);
G2L["10"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["10"]["Name"] = [[visTab]];
G2L["10"]["BackgroundTransparency"] = 1;


-- ReplicatedFirst.ScreenGui.Fanta.visTab.UIStroke
G2L["11"] = Instance.new("UIStroke", G2L["10"]);
G2L["11"]["Thickness"] = 0.6;
G2L["11"]["Color"] = Color3.fromRGB(255, 255, 255);


-- ReplicatedFirst.ScreenGui.Fanta.visTab.box
G2L["12"] = Instance.new("TextButton", G2L["10"]);
G2L["12"]["TextSize"] = 14;
G2L["12"]["TextColor3"] = Color3.fromRGB(0, 0, 0);
G2L["12"]["BackgroundColor3"] = Color3.fromRGB(22, 118, 0);
G2L["12"]["FontFace"] = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["12"]["Size"] = UDim2.new(0, 17, 0, 18);
G2L["12"]["Name"] = [[box]];
G2L["12"]["BorderColor3"] = Color3.fromRGB(255, 255, 255);
G2L["12"]["Text"] = [[]];
G2L["12"]["Position"] = UDim2.new(0.06104, 0, 0.01935, 0);


-- ReplicatedFirst.ScreenGui.Fanta.visTab.box.LocalScript
G2L["13"] = Instance.new("LocalScript", G2L["12"]);



-- ReplicatedFirst.ScreenGui.Fanta.visTab.TextLabel
G2L["14"] = Instance.new("TextLabel", G2L["10"]);
G2L["14"]["BorderSizePixel"] = 0;
G2L["14"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["14"]["TextSize"] = 14;
G2L["14"]["FontFace"] = Font.new([[rbxasset://fonts/families/Ubuntu.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["14"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["14"]["BackgroundTransparency"] = 1;
G2L["14"]["Size"] = UDim2.new(0, 100, 0, 50);
G2L["14"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["14"]["Text"] = [[Enable]];
G2L["14"]["Position"] = UDim2.new(0.04608, 0, -0.02479, 0);


-- ReplicatedFirst.ScreenGui.Fanta.visTab.chams
G2L["15"] = Instance.new("TextButton", G2L["10"]);
G2L["15"]["TextSize"] = 14;
G2L["15"]["TextColor3"] = Color3.fromRGB(0, 0, 0);
G2L["15"]["BackgroundColor3"] = Color3.fromRGB(22, 118, 0);
G2L["15"]["FontFace"] = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["15"]["Size"] = UDim2.new(0, 17, 0, 18);
G2L["15"]["Name"] = [[chams]];
G2L["15"]["BorderColor3"] = Color3.fromRGB(255, 255, 255);
G2L["15"]["Text"] = [[]];
G2L["15"]["Position"] = UDim2.new(0.06104, 0, 0.17517, 0);


-- ReplicatedFirst.ScreenGui.Fanta.visTab.chams.LocalScript
G2L["16"] = Instance.new("LocalScript", G2L["15"]);



-- ReplicatedFirst.ScreenGui.Fanta.visTab.TextLabel
G2L["17"] = Instance.new("TextLabel", G2L["10"]);
G2L["17"]["BorderSizePixel"] = 0;
G2L["17"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["17"]["TextSize"] = 14;
G2L["17"]["FontFace"] = Font.new([[rbxasset://fonts/families/Ubuntu.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["17"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["17"]["BackgroundTransparency"] = 1;
G2L["17"]["Size"] = UDim2.new(0, 72, 0, 30);
G2L["17"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["17"]["Text"] = [[Chams]];
G2L["17"]["Position"] = UDim2.new(0.07834, 0, 0.15702, 0);


-- ReplicatedFirst.ScreenGui.Fanta.visTab.health
G2L["18"] = Instance.new("TextButton", G2L["10"]);
G2L["18"]["TextSize"] = 14;
G2L["18"]["TextColor3"] = Color3.fromRGB(0, 0, 0);
G2L["18"]["BackgroundColor3"] = Color3.fromRGB(22, 118, 0);
G2L["18"]["FontFace"] = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["18"]["Size"] = UDim2.new(0, 17, 0, 18);
G2L["18"]["Name"] = [[health]];
G2L["18"]["BorderColor3"] = Color3.fromRGB(255, 255, 255);
G2L["18"]["Text"] = [[]];
G2L["18"]["Position"] = UDim2.new(0.06104, 0, 0.27243, 0);


-- ReplicatedFirst.ScreenGui.Fanta.visTab.health.LocalScript
G2L["19"] = Instance.new("LocalScript", G2L["18"]);



-- ReplicatedFirst.ScreenGui.Fanta.visTab.TextLabel
G2L["1a"] = Instance.new("TextLabel", G2L["10"]);
G2L["1a"]["BorderSizePixel"] = 0;
G2L["1a"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["1a"]["TextSize"] = 14;
G2L["1a"]["FontFace"] = Font.new([[rbxasset://fonts/families/Ubuntu.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["1a"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["1a"]["BackgroundTransparency"] = 1;
G2L["1a"]["Size"] = UDim2.new(0, 72, 0, 30);
G2L["1a"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["1a"]["Text"] = [[Health bar]];
G2L["1a"]["Position"] = UDim2.new(0.1106, 0, 0.25344, 0);


-- ReplicatedFirst.ScreenGui.Fanta.visTab.name
G2L["1b"] = Instance.new("TextButton", G2L["10"]);
G2L["1b"]["TextSize"] = 14;
G2L["1b"]["TextColor3"] = Color3.fromRGB(0, 0, 0);
G2L["1b"]["BackgroundColor3"] = Color3.fromRGB(22, 118, 0);
G2L["1b"]["FontFace"] = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["1b"]["Size"] = UDim2.new(0, 17, 0, 18);
G2L["1b"]["Name"] = [[name]];
G2L["1b"]["BorderColor3"] = Color3.fromRGB(255, 255, 255);
G2L["1b"]["Text"] = [[]];
G2L["1b"]["Position"] = UDim2.new(0.06104, 0, 0.38314, 0);


-- ReplicatedFirst.ScreenGui.Fanta.visTab.name.LocalScript
G2L["1c"] = Instance.new("LocalScript", G2L["1b"]);



-- ReplicatedFirst.ScreenGui.Fanta.visTab.TextLabel
G2L["1d"] = Instance.new("TextLabel", G2L["10"]);
G2L["1d"]["BorderSizePixel"] = 0;
G2L["1d"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["1d"]["TextSize"] = 14;
G2L["1d"]["FontFace"] = Font.new([[rbxasset://fonts/families/Ubuntu.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["1d"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["1d"]["BackgroundTransparency"] = 1;
G2L["1d"]["Size"] = UDim2.new(0, 72, 0, 30);
G2L["1d"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["1d"]["Text"] = [[Name ESP]];
G2L["1d"]["Position"] = UDim2.new(0.1106, 0, 0.36639, 0);


-- ReplicatedFirst.ScreenGui.Fanta.aimTab
G2L["1e"] = Instance.new("Frame", G2L["3"]);
G2L["1e"]["Visible"] = false;
G2L["1e"]["BorderSizePixel"] = 0;
G2L["1e"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["1e"]["Size"] = UDim2.new(0, 434, 0, 363);
G2L["1e"]["Position"] = UDim2.new(0.23169, 0, 0.04612, 0);
G2L["1e"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["1e"]["Name"] = [[aimTab]];
G2L["1e"]["BackgroundTransparency"] = 1;


-- ReplicatedFirst.ScreenGui.Fanta.aimTab.UIStroke
G2L["1f"] = Instance.new("UIStroke", G2L["1e"]);
G2L["1f"]["Thickness"] = 0.6;
G2L["1f"]["Color"] = Color3.fromRGB(255, 255, 255);


-- ReplicatedFirst.ScreenGui.Fanta.aimTab.aimbot
G2L["20"] = Instance.new("TextButton", G2L["1e"]);
G2L["20"]["TextSize"] = 14;
G2L["20"]["TextColor3"] = Color3.fromRGB(0, 0, 0);
G2L["20"]["BackgroundColor3"] = Color3.fromRGB(22, 118, 0);
G2L["20"]["FontFace"] = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["20"]["Size"] = UDim2.new(0, 17, 0, 18);
G2L["20"]["Name"] = [[aimbot]];
G2L["20"]["BorderColor3"] = Color3.fromRGB(255, 255, 255);
G2L["20"]["Text"] = [[]];
G2L["20"]["Position"] = UDim2.new(0.06104, 0, 0.01935, 0);


-- ReplicatedFirst.ScreenGui.Fanta.aimTab.aimbot.LocalScript
G2L["21"] = Instance.new("LocalScript", G2L["20"]);



-- ReplicatedFirst.ScreenGui.Fanta.aimTab.TextLabel
G2L["22"] = Instance.new("TextLabel", G2L["1e"]);
G2L["22"]["BorderSizePixel"] = 0;
G2L["22"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["22"]["TextSize"] = 14;
G2L["22"]["FontFace"] = Font.new([[rbxasset://fonts/families/Ubuntu.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["22"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["22"]["BackgroundTransparency"] = 1;
G2L["22"]["Size"] = UDim2.new(0, 33, 0, 33);
G2L["22"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["22"]["Text"] = [[Aimbot]];
G2L["22"]["Position"] = UDim2.new(0.13134, 0, -0.00268, 0);


-- ReplicatedFirst.ScreenGui.Fanta.misTab
G2L["23"] = Instance.new("Frame", G2L["3"]);
G2L["23"]["Visible"] = false;
G2L["23"]["BorderSizePixel"] = 0;
G2L["23"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["23"]["Size"] = UDim2.new(0, 434, 0, 363);
G2L["23"]["Position"] = UDim2.new(0.23169, 0, 0.04612, 0);
G2L["23"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["23"]["Name"] = [[misTab]];
G2L["23"]["BackgroundTransparency"] = 1;


-- ReplicatedFirst.ScreenGui.Fanta.misTab.UIStroke
G2L["24"] = Instance.new("UIStroke", G2L["23"]);
G2L["24"]["Thickness"] = 0.6;
G2L["24"]["Color"] = Color3.fromRGB(255, 255, 255);


-- ReplicatedFirst.ScreenGui.Fanta.misTab.fov
G2L["25"] = Instance.new("TextButton", G2L["23"]);
G2L["25"]["TextSize"] = 14;
G2L["25"]["TextColor3"] = Color3.fromRGB(0, 0, 0);
G2L["25"]["BackgroundColor3"] = Color3.fromRGB(22, 118, 0);
G2L["25"]["FontFace"] = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["25"]["Size"] = UDim2.new(0, 17, 0, 18);
G2L["25"]["Name"] = [[fov]];
G2L["25"]["BorderColor3"] = Color3.fromRGB(255, 255, 255);
G2L["25"]["Text"] = [[]];
G2L["25"]["Position"] = UDim2.new(0.09356, 0, 0.02629, 0);


-- ReplicatedFirst.ScreenGui.Fanta.misTab.fov.slider
G2L["26"] = Instance.new("Frame", G2L["25"]);
G2L["26"]["BorderSizePixel"] = 0;
G2L["26"]["BackgroundColor3"] = Color3.fromRGB(22, 118, 0);
G2L["26"]["Size"] = UDim2.new(0, 190, 0, 13);
G2L["26"]["Position"] = UDim2.new(-0.29412, 0, 2.0088, 0);
G2L["26"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["26"]["Name"] = [[slider]];


-- ReplicatedFirst.ScreenGui.Fanta.misTab.fov.slider.UIStroke
G2L["27"] = Instance.new("UIStroke", G2L["26"]);
G2L["27"]["Color"] = Color3.fromRGB(255, 255, 255);


-- ReplicatedFirst.ScreenGui.Fanta.misTab.fov.slider.sliderKnob
G2L["28"] = Instance.new("Frame", G2L["26"]);
G2L["28"]["BorderSizePixel"] = 0;
G2L["28"]["BackgroundColor3"] = Color3.fromRGB(52, 68, 110);
G2L["28"]["Size"] = UDim2.new(0, 15, 0, 13);
G2L["28"]["Position"] = UDim2.new(0.57415, 0, 0, 0);
G2L["28"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["28"]["Name"] = [[sliderKnob]];


-- ReplicatedFirst.ScreenGui.Fanta.misTab.fov.slider.sliderKnob.sliderValue
G2L["29"] = Instance.new("TextLabel", G2L["28"]);
G2L["29"]["BorderSizePixel"] = 0;
G2L["29"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["29"]["TextSize"] = 14;
G2L["29"]["FontFace"] = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["29"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["29"]["BackgroundTransparency"] = 1;
G2L["29"]["Size"] = UDim2.new(0, 28, 0, 24);
G2L["29"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["29"]["Text"] = [[70]];
G2L["29"]["Name"] = [[sliderValue]];
G2L["29"]["Position"] = UDim2.new(-0.46667, 0, -1.46154, 0);


-- ReplicatedFirst.ScreenGui.Fanta.misTab.fov.LocalScript
G2L["2a"] = Instance.new("LocalScript", G2L["25"]);



-- ReplicatedFirst.ScreenGui.Fanta.misTab.fov.TextLabel
G2L["2b"] = Instance.new("TextLabel", G2L["25"]);
G2L["2b"]["BorderSizePixel"] = 0;
G2L["2b"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["2b"]["TextSize"] = 14;
G2L["2b"]["FontFace"] = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["2b"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["2b"]["BackgroundTransparency"] = 1;
G2L["2b"]["Size"] = UDim2.new(0, 73, 0, 33);
G2L["2b"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["2b"]["Text"] = [[Override FOV]];
G2L["2b"]["Position"] = UDim2.new(1.82353, 0, -0.45711, 0);


-- ReplicatedFirst.ScreenGui.Fanta.misTab.chat
G2L["2c"] = Instance.new("TextButton", G2L["23"]);
G2L["2c"]["TextSize"] = 14;
G2L["2c"]["TextColor3"] = Color3.fromRGB(0, 0, 0);
G2L["2c"]["BackgroundColor3"] = Color3.fromRGB(22, 118, 0);
G2L["2c"]["FontFace"] = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["2c"]["Size"] = UDim2.new(0, 17, 0, 18);
G2L["2c"]["Name"] = [[chat]];
G2L["2c"]["BorderColor3"] = Color3.fromRGB(255, 255, 255);
G2L["2c"]["Text"] = [[]];
G2L["2c"]["Position"] = UDim2.new(0.09356, 0, 0.22463, 0);


-- ReplicatedFirst.ScreenGui.Fanta.misTab.chat.TextLabel
G2L["2d"] = Instance.new("TextLabel", G2L["2c"]);
G2L["2d"]["BorderSizePixel"] = 0;
G2L["2d"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["2d"]["TextSize"] = 14;
G2L["2d"]["FontFace"] = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["2d"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["2d"]["BackgroundTransparency"] = 1;
G2L["2d"]["Size"] = UDim2.new(0, 73, 0, 33);
G2L["2d"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["2d"]["Text"] = [[Chat Reveal]];
G2L["2d"]["Position"] = UDim2.new(1.41176, 0, -0.45711, 0);


-- ReplicatedFirst.ScreenGui.Fanta.misTab.chat.LocalScript
G2L["2e"] = Instance.new("LocalScript", G2L["2c"]);



-- ReplicatedFirst.ScreenGui.Fanta.settingsTab
G2L["2f"] = Instance.new("Frame", G2L["3"]);
G2L["2f"]["Visible"] = false;
G2L["2f"]["BorderSizePixel"] = 0;
G2L["2f"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["2f"]["Size"] = UDim2.new(0, 434, 0, 363);
G2L["2f"]["Position"] = UDim2.new(0.23169, 0, 0.04612, 0);
G2L["2f"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["2f"]["Name"] = [[settingsTab]];
G2L["2f"]["BackgroundTransparency"] = 1;


-- ReplicatedFirst.ScreenGui.Fanta.settingsTab.UIStroke
G2L["30"] = Instance.new("UIStroke", G2L["2f"]);
G2L["30"]["Thickness"] = 0.6;
G2L["30"]["Color"] = Color3.fromRGB(255, 255, 255);


-- ReplicatedFirst.ScreenGui.Fanta.settingsTab.fakelag
G2L["31"] = Instance.new("TextButton", G2L["2f"]);
G2L["31"]["TextSize"] = 14;
G2L["31"]["TextColor3"] = Color3.fromRGB(0, 0, 0);
G2L["31"]["BackgroundColor3"] = Color3.fromRGB(22, 118, 0);
G2L["31"]["FontFace"] = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["31"]["Size"] = UDim2.new(0, 17, 0, 18);
G2L["31"]["Name"] = [[fakelag]];
G2L["31"]["BorderColor3"] = Color3.fromRGB(255, 255, 255);
G2L["31"]["Text"] = [[]];
G2L["31"]["Position"] = UDim2.new(0.09356, 0, 0.02629, 0);


-- ReplicatedFirst.ScreenGui.Fanta.settingsTab.fakelag.TextLabel
G2L["32"] = Instance.new("TextLabel", G2L["31"]);
G2L["32"]["BorderSizePixel"] = 0;
G2L["32"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["32"]["TextSize"] = 14;
G2L["32"]["FontFace"] = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["32"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["32"]["BackgroundTransparency"] = 1;
G2L["32"]["Size"] = UDim2.new(0, 73, 0, 33);
G2L["32"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["32"]["Text"] = [[Fakelag]];
G2L["32"]["Position"] = UDim2.new(0.47059, 0, -0.45711, 0);


-- ReplicatedFirst.ScreenGui.Fanta.settingsTab.fakelag.LocalScript
G2L["33"] = Instance.new("LocalScript", G2L["31"]);



-- ReplicatedFirst.ScreenGui.Fanta.discord
G2L["34"] = Instance.new("TextLabel", G2L["3"]);
G2L["34"]["BorderSizePixel"] = 0;
G2L["34"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["34"]["TextSize"] = 14;
G2L["34"]["FontFace"] = Font.new([[rbxasset://fonts/families/Ubuntu.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["34"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["34"]["BackgroundTransparency"] = 1;
G2L["34"]["Size"] = UDim2.new(0, 57, 0, 21);
G2L["34"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["34"]["Text"] = [[https://discord.gg/wy3BuyPWwx]];
G2L["34"]["Name"] = [[discord]];
G2L["34"]["Position"] = UDim2.new(0.12606, 0, 0.94903, 0);


-- ReplicatedFirst.ScreenGui.Fanta.drag
G2L["35"] = Instance.new("LocalScript", G2L["3"]);
G2L["35"]["Name"] = [[drag]];


-- ReplicatedFirst.ScreenGui.LocalScript
local function C_2()
local script = G2L["2"];
	-- Variables
	local userInputService = game:GetService("UserInputService")
	local frame = script.Parent:WaitForChild("Fanta") -- Replace with your frame's name
	
	-- Initial state: frame is hidden
	frame.Visible = true
	
	-- Function to toggle frame visibility
	local function toggleFrame()
		frame.Visible = not frame.Visible
	end
	
	-- Listen for the INSERT key press
	userInputService.InputBegan:Connect(function(input, gameProcessed)
		-- Check if the input is the INSERT key and it's not being processed by other parts of the game
		if not gameProcessed and input.UserInputType == Enum.UserInputType.Keyboard then
			if input.KeyCode == Enum.KeyCode.Insert then
				toggleFrame() -- Toggle the frame when INSERT is pressed
			end
		end
	end)
	
end;
task.spawn(C_2);
-- ReplicatedFirst.ScreenGui.Fanta.aim.LocalScript
local function C_5()
local script = G2L["5"];
	script.Parent.MouseButton1Click:Connect(function()
		script.Parent.Parent.aimTab.Visible = true
		script.Parent.Parent.visTab.Visible = false
		script.Parent.Parent.misTab.Visible = false
		script.Parent.Parent.settingsTab.Visible = false
		wait(0.1)
	end)
	
	
end;
task.spawn(C_5);
-- ReplicatedFirst.ScreenGui.Fanta.visual.LocalScript
local function C_7()
local script = G2L["7"];
	script.Parent.MouseButton1Click:Connect(function()
		script.Parent.Parent.aimTab.Visible = false
		script.Parent.Parent.visTab.Visible = true
		script.Parent.Parent.misTab.Visible = false
		script.Parent.Parent.settingsTab.Visible = false
		wait(0.1)
	end)
	
	
end;
task.spawn(C_7);
-- ReplicatedFirst.ScreenGui.Fanta.misc.LocalScript
local function C_9()
local script = G2L["9"];
	script.Parent.MouseButton1Click:Connect(function()
		script.Parent.Parent.aimTab.Visible = false
		script.Parent.Parent.visTab.Visible = false
		script.Parent.Parent.misTab.Visible = true
		script.Parent.Parent.settingsTab.Visible = false
		wait(0.1)
	end)
	
	
end;
task.spawn(C_9);
-- ReplicatedFirst.ScreenGui.Fanta.hvhTab.LocalScript
local function C_b()
local script = G2L["b"];
	script.Parent.MouseButton1Click:Connect(function()
		script.Parent.Parent.aimTab.Visible = false
		script.Parent.Parent.visTab.Visible = false
		script.Parent.Parent.misTab.Visible = false
		script.Parent.Parent.settingsTab.Visible = true
		wait(0.1)
	end)
	
	
end;
task.spawn(C_b);
-- ReplicatedFirst.ScreenGui.Fanta.visTab.box.LocalScript
local function C_13()
local script = G2L["13"];
	-- References to the button and services
	local button = script.Parent
	local Player = game:GetService("Players").LocalPlayer
	local Camera = game:GetService("Workspace").CurrentCamera
	
	local espEnabled = false -- Toggle state
	local connections = {} -- Table to store connections for disabling later
	local espBoxes = {} -- Table to store ESP boxes for removal
	
	-- ESP Script Function
	local function DrawESP(plr)
		local Box = Drawing.new("Quad")
		Box.Visible = false
		Box.PointA = Vector2.new(0, 0)
		Box.PointB = Vector2.new(0, 0)
		Box.PointC = Vector2.new(0, 0)
		Box.PointD = Vector2.new(0, 0)
		Box.Color = Color3.fromRGB(255, 255, 255) -- White color for ESP boxes
		Box.Thickness = 1
		Box.Transparency = 1
	
		-- Add box to the espBoxes table for cleanup later
		table.insert(espBoxes, Box)
	
		local function Update()
			local c
			c = game:GetService("RunService").RenderStepped:Connect(function()
				if espEnabled and plr.Character and plr.Character:FindFirstChild("Humanoid") and plr.Character.PrimaryPart and plr.Character:FindFirstChild("Humanoid").Health > 0 then
					local pos, vis = Camera:WorldToViewportPoint(plr.Character.PrimaryPart.Position)
					if vis then
						local points = {}
						for _, v in pairs(plr.Character:GetChildren()) do
							if v:IsA("BasePart") then
								local p, isVisible = Camera:WorldToViewportPoint(v.Position)
								if isVisible then
									table.insert(points, p)
								end
							end
						end
	
						if #points > 0 then
							local TopY, DownY, LeftX, RightX = math.huge, -math.huge, math.huge, -math.huge
							for _, p in ipairs(points) do
								TopY = math.min(TopY, p.Y)
								DownY = math.max(DownY, p.Y)
								LeftX = math.min(LeftX, p.X)
								RightX = math.max(RightX, p.X)
							end
	
							-- Match the height of the ESP box to the health bar height
							Box.PointA = Vector2.new(RightX, TopY)
							Box.PointB = Vector2.new(LeftX, TopY)
							Box.PointC = Vector2.new(LeftX, DownY)
							Box.PointD = Vector2.new(RightX, DownY)
							Box.Visible = true
						else
							Box.Visible = false
						end
					else
						Box.Visible = false
					end
				else
					Box.Visible = false
					if not game:GetService("Players"):FindFirstChild(plr.Name) then
						c:Disconnect()
						Box:Remove() -- Fully remove the box
					end
				end
			end)
			table.insert(connections, c) -- Store connection for cleanup
		end
		coroutine.wrap(Update)()
	end
	
	-- Function to enable ESP
	local function EnableESP()
		for _, v in pairs(game:GetService("Players"):GetPlayers()) do
			if v ~= Player then
				DrawESP(v)
			end
		end
	
		game:GetService("Players").PlayerAdded:Connect(function(v)
			if espEnabled then
				DrawESP(v)
			end
		end)
	end
	
	-- Function to disable ESP
	local function DisableESP()
		-- Disconnect all active connections
		for _, connection in ipairs(connections) do
			connection:Disconnect()
		end
		connections = {}
	
		-- Remove all ESP boxes
		for _, box in ipairs(espBoxes) do
			box:Remove()
		end
		espBoxes = {}
	end
	
	-- Button click logic
	button.MouseButton1Click:Connect(function()
		espEnabled = not espEnabled
		if espEnabled then
			button.BackgroundColor3 = Color3.fromRGB(51, 67, 109) -- Green when active
			EnableESP()
		else
			button.BackgroundColor3 = Color3.fromRGB(21, 117, 0) -- Gray when inactive
			DisableESP()
		end
	end)
	
end;
task.spawn(C_13);
-- ReplicatedFirst.ScreenGui.Fanta.visTab.chams.LocalScript
local function C_16()
local script = G2L["16"];
	local FillColor = Color3.fromRGB(175, 25, 255)
	local DepthMode = "AlwaysOnTop"
	local FillTransparency = 0.5
	local OutlineColor = Color3.fromRGB(255, 255, 255)
	local OutlineTransparency = 0
	
	local CoreGui = game:FindService("CoreGui")
	local Players = game:FindService("Players")
	local lp = Players.LocalPlayer
	local connections = {}
	
	local Storage = Instance.new("Folder")
	Storage.Parent = CoreGui
	Storage.Name = "Highlight_Storage"
	
	local highlightEnabled = false -- Toggle state
	
	local function Highlight(plr)
		local Highlight = Instance.new("Highlight")
		Highlight.Name = plr.Name
		Highlight.FillColor = FillColor
		Highlight.DepthMode = DepthMode
		Highlight.FillTransparency = FillTransparency
		Highlight.OutlineColor = OutlineColor
		Highlight.OutlineTransparency = 0
		Highlight.Parent = Storage
	
		local plrchar = plr.Character
		if plrchar then
			Highlight.Adornee = plrchar
		end
	
		connections[plr] = plr.CharacterAdded:Connect(function(char)
			Highlight.Adornee = char
		end)
	end
	
	-- Toggle highlight
	local button = script.Parent -- Assuming this script is inside a button
	
	button.MouseButton1Click:Connect(function()
		highlightEnabled = not highlightEnabled -- Toggle the state of the highlight effect
		if highlightEnabled then
			button.BackgroundColor3 = Color3.fromRGB(51, 67, 109) -- Green when active
			-- Enable highlighting for all players
			for _, plr in ipairs(Players:GetPlayers()) do
				if plr.Name ~= lp.Name then
					Highlight(plr)
				end
			end
		else
			button.BackgroundColor3 = Color3.fromRGB(21, 117, 0) -- Gray when inactive
			-- Disable highlighting for all players
			for _, plr in ipairs(Players:GetPlayers()) do
				if plr.Name ~= lp.Name and Storage:FindFirstChild(plr.Name) then
					Storage[plr.Name]:Destroy()
				end
			end
		end
	end)
	
	Players.PlayerAdded:Connect(function(plr)
		if highlightEnabled then
			Highlight(plr)
		end
	end)
	
	for i, v in next, Players:GetPlayers() do
		if highlightEnabled then
			Highlight(v)
		end
	end
	
	Players.PlayerRemoving:Connect(function(plr)
		local plrname = plr.Name
		if Storage[plrname] then
			Storage[plrname]:Destroy()
		end
		if connections[plr] then
			connections[plr]:Disconnect()
		end
	end)
end;
task.spawn(C_16);
-- ReplicatedFirst.ScreenGui.Fanta.visTab.health.LocalScript
local function C_19()
local script = G2L["19"];
	local Settings = {
		HealthBar_Color = Color3.fromRGB(0, 255, 0), -- Health Bar Color (Green)
		HealthBar_Thickness = 1.5
	}
	
	local player = game:GetService("Players").LocalPlayer
	local camera = game:GetService("Workspace").CurrentCamera
	local mouse = player:GetMouse()
	
	local healthBarEnabled = false -- Health bar toggle state
	local healthBars = {} -- Store health bar drawing objects
	
	-- Create the health bar and the background
	local function NewLine(thickness, color)
		local line = Drawing.new("Line")
		line.Visible = false
		line.From = Vector2.new(0, 0)
		line.To = Vector2.new(0, 0)
		line.Color = color
		line.Thickness = thickness
		line.Transparency = 1
		return line
	end
	
	local function DrawHealthBar(plr)
		local healthBarBackground = NewLine(3, Color3.fromRGB(0, 0, 0)) -- Black background
		local healthBar = NewLine(Settings.HealthBar_Thickness, Settings.HealthBar_Color) -- Green health bar
	
		-- Store health bar parts for toggling visibility
		table.insert(healthBars, {healthBarBackground, healthBar})
	
		local function UpdateHealthBar()
			local connection
			connection = game:GetService("RunService").RenderStepped:Connect(function()
				if healthBarEnabled and plr.Character ~= nil and plr.Character:FindFirstChild("Humanoid") ~= nil and plr.Character:FindFirstChild("HumanoidRootPart") ~= nil and plr.Character.Humanoid.Health > 0 and plr.Character:FindFirstChild("Head") ~= nil then
					local HumPos, OnScreen = camera:WorldToViewportPoint(plr.Character.HumanoidRootPart.Position)
					if OnScreen then
						local head = camera:WorldToViewportPoint(plr.Character.Head.Position)
						local DistanceY = math.clamp((Vector2.new(head.X, head.Y) - Vector2.new(HumPos.X, HumPos.Y)).magnitude, 2, math.huge)
	
						local function SetHealthBarPosition(item)
							item.From = Vector2.new(HumPos.X - DistanceY - 4, HumPos.Y + DistanceY*2)
							item.To = Vector2.new(HumPos.X - DistanceY - 4, HumPos.Y - DistanceY*2)
						end
	
						-- Only update the position when necessary to avoid jank
						if healthBarBackground.From.X ~= HumPos.X - DistanceY - 4 or healthBarBackground.From.Y ~= HumPos.Y + DistanceY*2 then
							SetHealthBarPosition(healthBarBackground)
							SetHealthBarPosition(healthBar)
						end
	
						-- Update health bar length based on health
						local d = (Vector2.new(HumPos.X - DistanceY, HumPos.Y - DistanceY*2) - Vector2.new(HumPos.X - DistanceY, HumPos.Y + DistanceY*2)).magnitude 
						local healthoffset = plr.Character.Humanoid.Health/plr.Character.Humanoid.MaxHealth * d
						healthBar.To = Vector2.new(HumPos.X - DistanceY - 4, HumPos.Y + DistanceY*2 - healthoffset)
	
						-- Update color based on health
						local green = Color3.fromRGB(0, 255, 0)
						local red = Color3.fromRGB(255, 0, 0)
						healthBar.Color = red:lerp(green, plr.Character.Humanoid.Health/plr.Character.Humanoid.MaxHealth)
	
						healthBarBackground.Visible = true
						healthBar.Visible = true
					else 
						healthBarBackground.Visible = false
						healthBar.Visible = false
					end
				else 
					healthBarBackground.Visible = false
					healthBar.Visible = false
				end
			end)
		end
		coroutine.wrap(UpdateHealthBar)()
	end
	
	-- Toggle health bar on button press
	local button = script.Parent -- Assuming this script is inside a button
	
	button.MouseButton1Click:Connect(function()
		healthBarEnabled = not healthBarEnabled -- Toggle the state of the health bar
		if healthBarEnabled then
			-- Change button color to green (activated)
			button.BackgroundColor3 = Color3.fromRGB(51, 67, 109)
		else
			-- Change button color to gray (deactivated)
			button.BackgroundColor3 = Color3.fromRGB(21, 117, 0)
		end
	
		-- Update health bars for all players
		for _, plr in ipairs(game:GetService("Players"):GetPlayers()) do
			if plr.Name ~= player.Name then
				DrawHealthBar(plr)
			end
		end
	end)
	
	-- Initialize health bar for players already in the game
	for _, plr in ipairs(game:GetService("Players"):GetPlayers()) do
		if plr.Name ~= player.Name then
			DrawHealthBar(plr)
		end
	end
	
end;
task.spawn(C_19);
-- ReplicatedFirst.ScreenGui.Fanta.visTab.name.LocalScript
local function C_1c()
local script = G2L["1c"];
	local player = game:GetService("Players").LocalPlayer
	local camera = game:GetService("Workspace").CurrentCamera
	local players = game:GetService("Players")
	local button = script.Parent -- Assuming this script is inside a button
	
	local nameEspEnabled = false -- Toggle state
	local nameEspDrawings = {} -- Table to store drawing objects for removal
	
	-- Function to create text above the player's head
	local function DrawNameESP(plr)
		local nameText = Drawing.new("Text")
		nameText.Visible = false
		nameText.Size = 18
		nameText.Color = Color3.fromRGB(255, 255, 255)
		nameText.Center = true
		nameText.Outline = true
		nameText.OutlineColor = Color3.fromRGB(0, 0, 0)
	
		-- Store the drawing object
		nameEspDrawings[plr] = nameText
	
		local function Update()
			local connection
			connection = game:GetService("RunService").RenderStepped:Connect(function()
				if nameEspEnabled and plr.Character and plr.Character:FindFirstChild("HumanoidRootPart") then
					local pos, onScreen = camera:WorldToViewportPoint(plr.Character.HumanoidRootPart.Position)
					if onScreen then
						nameText.Text = plr.DisplayName
						nameText.Position = Vector2.new(pos.X, pos.Y - 30) -- Position the name above the head
						nameText.Visible = true
					else
						nameText.Visible = false
					end
				else
					nameText.Visible = false
				end
			end)
		end
	
		coroutine.wrap(Update)()
	end
	
	-- Enable Name ESP for all players
	local function EnableNameESP()
		for _, plr in ipairs(players:GetPlayers()) do
			if plr ~= player then
				DrawNameESP(plr)
			end
		end
		players.PlayerAdded:Connect(function(plr)
			if nameEspEnabled then
				DrawNameESP(plr)
			end
		end)
	end
	
	-- Disable Name ESP
	local function DisableNameESP()
		for _, drawing in pairs(nameEspDrawings) do
			drawing.Visible = false
		end
		nameEspDrawings = {}
	end
	
	-- Button click logic for toggling Name ESP
	button.MouseButton1Click:Connect(function()
		nameEspEnabled = not nameEspEnabled
		if nameEspEnabled then
			button.BackgroundColor3 = Color3.fromRGB(51, 67, 109) -- Green when active
			EnableNameESP()
		else
			button.BackgroundColor3 = Color3.fromRGB(21, 117, 0) -- Gray when inactive
			DisableNameESP()
		end
	end)
	
	-- Initialize Name ESP for players already in the game
	for _, plr in ipairs(players:GetPlayers()) do
		if plr ~= player and nameEspEnabled then
			DrawNameESP(plr)
		end
	end
	
end;
task.spawn(C_1c);
-- ReplicatedFirst.ScreenGui.Fanta.aimTab.aimbot.LocalScript
local function C_21()
local script = G2L["21"];
	-- UI Button Setup (For toggling)
	local masterButton = script.Parent -- Assuming the script is inside the button
	local activeColor = Color3.fromRGB(51, 67, 109) -- Color when active (on)
	local inactiveColor = Color3.fromRGB(21, 117, 0) -- Color when inactive (off)
	local isAimlockActive = false -- Tracks whether aimlock is active
	
	local AimlockTarget
	local AimPart = "HumanoidRootPart" -- For R15 Games: {UpperTorso, LowerTorso, HumanoidRootPart, Head} | For R6 Games: {Head, Torso, HumanoidRootPart}
	local AimRadius = 50 -- Locking range
	local TeamCheck = false -- Team Check: False means can lock onto teammates
	local PredictMovement = true -- Predicts movement of the target
	local PredictionVelocity = 10 -- Speed of Prediction
	
	-- Change button color to active or inactive
	local function setActiveColor()
		masterButton.BackgroundColor3 = activeColor
	end
	
	local function setInactiveColor()
		masterButton.BackgroundColor3 = inactiveColor
	end
	
	-- Set initial button color
	setInactiveColor()
	
	-- Initialize Services and Variables
	local Players, Uis, RService, SGui = game:GetService("Players"), game:GetService("UserInputService"), game:GetService("RunService"), game:GetService("StarterGui")
	local Client, Mouse, Camera = Players.LocalPlayer, Players.LocalPlayer:GetMouse(), workspace.CurrentCamera
	local Aimlock = true
	local MousePressed = false
	local CanNotify = false
	
	-- Function to get the nearest target
	local function GetNearestTarget()
		local players = {}
		local PLAYER_HOLD = {}
		local DISTANCES = {}
	
		for i, v in pairs(Players:GetPlayers()) do
			if v ~= Client then
				table.insert(players, v)
			end
		end
	
		for i, v in pairs(players) do
			if v.Character ~= nil then
				local AIM = v.Character:FindFirstChild("Head")
				if TeamCheck == true and v.Team ~= Client.Team then
					local DISTANCE = (v.Character:FindFirstChild("Head").Position - Camera.CFrame.p).magnitude
					local RAY = Ray.new(Camera.CFrame.p, (Mouse.Hit.p - Camera.CFrame.p).unit * DISTANCE)
					local HIT, POS = workspace:FindPartOnRay(RAY, workspace)
					local DIFF = math.floor((POS - AIM.Position).magnitude)
					PLAYER_HOLD[v.Name .. i] = {}
					PLAYER_HOLD[v.Name .. i].dist = DISTANCE
					PLAYER_HOLD[v.Name .. i].plr = v
					PLAYER_HOLD[v.Name .. i].diff = DIFF
					table.insert(DISTANCES, DIFF)
				elseif TeamCheck == false and v.Team == Client.Team then
					local DISTANCE = (v.Character:FindFirstChild("Head").Position - Camera.CFrame.p).magnitude
					local RAY = Ray.new(Camera.CFrame.p, (Mouse.Hit.p - Camera.CFrame.p).unit * DISTANCE)
					local HIT, POS = workspace:FindPartOnRay(RAY, workspace)
					local DIFF = math.floor((POS - AIM.Position).magnitude)
					PLAYER_HOLD[v.Name .. i] = {}
					PLAYER_HOLD[v.Name .. i].dist = DISTANCE
					PLAYER_HOLD[v.Name .. i].plr = v
					PLAYER_HOLD[v.Name .. i].diff = DIFF
					table.insert(DISTANCES, DIFF)
				end
			end
		end
	
		if unpack(DISTANCES) == nil then
			return nil
		end
	
		local L_DISTANCE = math.floor(math.min(unpack(DISTANCES)))
		if L_DISTANCE > AimRadius then
			return nil
		end
	
		for i, v in pairs(PLAYER_HOLD) do
			if v.diff == L_DISTANCE then
				return v.plr
			end
		end
		return nil
	end
	
	-- UI Button click connection
	masterButton.MouseButton1Click:Connect(function()
		isAimlockActive = not isAimlockActive
		if isAimlockActive then
			setActiveColor()
		else
			setInactiveColor()
		end
	end)
	
	Uis.InputBegan:Connect(function(Key)
		if Key.UserInputType == Enum.UserInputType.MouseButton2 then
			if not MousePressed then
				MousePressed = true
				local Target = GetNearestTarget()
				if Target then
					AimlockTarget = Target
				end
			end
		end
	end)
	
	Uis.InputEnded:Connect(function(Key)
		if Key.UserInputType == Enum.UserInputType.MouseButton2 then
			AimlockTarget = nil
			MousePressed = false
		end
	end)
	
	RService.RenderStepped:Connect(function()
		if isAimlockActive and MousePressed then
			if AimlockTarget and AimlockTarget.Character and AimlockTarget.Character:FindFirstChild(AimPart) then
				local TargetPos = AimlockTarget.Character[AimPart].Position
				if PredictMovement then
					Camera.CFrame = CFrame.new(Camera.CFrame.p, TargetPos + AimlockTarget.Character[AimPart].Velocity / PredictionVelocity)
				else
					Camera.CFrame = CFrame.new(Camera.CFrame.p, TargetPos)
				end
			end
		end
	end)
	
end;
task.spawn(C_21);
-- ReplicatedFirst.ScreenGui.Fanta.misTab.fov.LocalScript
local function C_2a()
local script = G2L["2a"];
	-- Variables
	local camera = game.Workspace.CurrentCamera
	local masterButton = script.Parent -- Assuming the script is inside the button
	local slider = masterButton:FindFirstChild("slider") -- The main slider frame
	local sliderKnob = slider:FindFirstChild("sliderKnob") -- The knob
	local sliderValue = sliderKnob:FindFirstChild("sliderValue") -- The TextLabel inside the knob
	
	local minValue = 1 -- Minimum FOV value
	local maxValue = 120 -- Maximum FOV value
	local defaultFOV = 70 -- Default FOV
	local sliderEnabled = false -- Master switch state
	local runService = game:GetService("RunService")
	local lockedFOV = defaultFOV -- Stores the locked FOV value
	local renderStepConnection -- To manage the RenderStepped connection
	
	-- Update the camera's FOV based on the slider's position
	local function updateFOV(position)
		local sliderWidth = slider.AbsoluteSize.X
		local normalizedPosition = math.clamp(position / sliderWidth, 0, 1)
		lockedFOV = math.floor(minValue + (maxValue - minValue) * normalizedPosition)
	
		-- Update the slider value text
		sliderValue.Text = tostring(lockedFOV)
		sliderValue.Position = UDim2.new(0.5, -sliderValue.TextBounds.X / 2, -1, 0)
	end
	
	-- Start or stop locking the FOV
	local function toggleFOVLock(enabled)
		if enabled then
			-- Start locking the FOV
			renderStepConnection = runService.RenderStepped:Connect(function()
				camera.FieldOfView = lockedFOV
			end)
		else
			-- Stop locking the FOV
			if renderStepConnection then
				renderStepConnection:Disconnect()
				renderStepConnection = nil
			end
		end
	end
	
	-- Handle the initial drag to move the slider knob
	local userInputService = game:GetService("UserInputService")
	local dragging = false
	
	sliderKnob.InputBegan:Connect(function(input)
		if input.UserInputType == Enum.UserInputType.MouseButton1 then
			dragging = true
			masterButton.Parent.Draggable = false -- Prevent dragging the parent menu
		end
	end)
	
	userInputService.InputEnded:Connect(function(input)
		if input.UserInputType == Enum.UserInputType.MouseButton1 then
			dragging = false
			masterButton.Parent.Draggable = true -- Re-enable dragging the parent menu
		end
	end)
	
	userInputService.InputChanged:Connect(function(input)
		if dragging and input.UserInputType == Enum.UserInputType.MouseMovement then
			local mousePos = input.Position.X
			local sliderPos = slider.AbsolutePosition.X
			local sliderWidth = slider.AbsoluteSize.X
			local relativePos = math.clamp(mousePos - sliderPos, 0, sliderWidth)
	
			sliderKnob.Position = UDim2.new(0, relativePos, 0, 0) -- Fix Y to 0
			updateFOV(relativePos)
		end
	end)
	
	-- Toggle slider functionality
	masterButton.MouseButton1Click:Connect(function()
		sliderEnabled = not sliderEnabled
		if sliderEnabled then
			masterButton.BackgroundColor3 = Color3.fromRGB(51, 67, 109) -- Green when active
			toggleFOVLock(true)
		else
			masterButton.BackgroundColor3 = Color3.fromRGB(21, 117, 0) -- Gray when inactive
			camera.FieldOfView = defaultFOV -- Reset FOV when disabled
			toggleFOVLock(false)
		end
	end)
	
	-- Initialize the default state
	sliderKnob.Position = UDim2.new(0.5, 0, 0, 0) -- Set knob to default position
	sliderValue.Text = tostring(defaultFOV)
	camera.FieldOfView = defaultFOV
	
end;
task.spawn(C_2a);
-- ReplicatedFirst.ScreenGui.Fanta.misTab.chat.LocalScript
local function C_2e()
local script = G2L["2e"];
	-- // Services
	local Players = game:GetService("Players")
	
	-- // Vars
	local ChatFrame = Players.LocalPlayer.PlayerGui.Chat.Frame
	local isActivated = false -- Keeps track of toggle state
	
	-- // Function to toggle ChatFrame visibility and button color
	local function toggleChatFrame(button)
		isActivated = not isActivated
	
		if isActivated then
			ChatFrame.ChatChannelParentFrame.Visible = true
			ChatFrame.ChatBarParentFrame.Position = UDim2.new(0, 0, 1, -42)
			button.BackgroundColor3 = Color3.fromRGB(51, 67, 109)
		else
			ChatFrame.ChatChannelParentFrame.Visible = false
			button.BackgroundColor3 = Color3.fromRGB(21, 117, 0)
		end
	end
	
	-- // Connecting the button (assuming the script is inside the TextButton)
	script.Parent.MouseButton1Click:Connect(function()
		toggleChatFrame(script.Parent)
	end)
	
end;
task.spawn(C_2e);
-- ReplicatedFirst.ScreenGui.Fanta.settingsTab.fakelag.LocalScript
local function C_33()
local script = G2L["33"];
	-- Variables
	workspace[game.Players.LocalPlayer.Name].Archivable = true
	local originalChar = game.Players.LocalPlayer.Character
	local root = originalChar.HumanoidRootPart
	local clonedChar = nil
	local follow = false
	local fakeLagEnabled = false -- Toggle state
	local button = script.Parent -- Your button
	
	-- Colors for the button
	local onColor = Color3.fromRGB(51, 67, 109)
	local offColor = Color3.fromRGB(21, 117, 0)
	
	-- Function to create the fake lag model
	local function createClonedCharacter()
		if clonedChar then
			clonedChar:Destroy() -- Ensure only one clone exists
		end
	
		clonedChar = originalChar:Clone()
		clonedChar.Parent = workspace
		workspace.CurrentCamera.CameraSubject = clonedChar.Humanoid
	
		-- Apply visual effect to the lagging model
		for _, v in pairs(clonedChar:GetDescendants()) do
			if v:IsA("BasePart") then
				v.Material = Enum.Material.Neon
				v.Color = Color3.fromRGB(255, 0, 0) -- Lagging model is red
				v.Transparency = 0.7
				v.CanCollide = false -- Disable collisions
			end
		end
	
		-- Sync cloned character's movements
		game:GetService("RunService").Heartbeat:Connect(function()
			if clonedChar and fakeLagEnabled then
				clonedChar.Humanoid:Move(originalChar.Humanoid.MoveDirection)
				clonedChar.Humanoid.Jump = originalChar.Humanoid.Jump
			end
		end)
	end
	
	-- Fake lag functionality
	local function toggleFakeLag(state)
		fakeLagEnabled = state
	
		if fakeLagEnabled then
			-- Change button color to "on"
			button.BackgroundColor3 = onColor
	
			-- Create and manage the cloned character
			createClonedCharacter()
	
			-- Start fake lagging
			task.spawn(function()
				while fakeLagEnabled do
					-- Anchor the real character to simulate lag
					root.Anchored = true
					follow = false
					task.wait(math.random(60, 180) / 130) -- Delay to simulate lag (randomized for effect)
	
					-- Update the real character's position
					root.Anchored = false
					root.CFrame = clonedChar.HumanoidRootPart.CFrame
					follow = true
	
					-- Brief delay before the next lag cycle
					task.wait(0.05)
				end
			end)
		else
			-- Change button color to "off"
			button.BackgroundColor3 = offColor
	
			-- Stop fake lagging
			root.Anchored = false
			follow = true
	
			-- Destroy the fake lag model
			if clonedChar then
				clonedChar:Destroy()
				clonedChar = nil
			end
	
			-- Ensure camera goes back to the real character
			workspace.CurrentCamera.CameraSubject = originalChar.Humanoid
		end
	end
	
	-- Button click handler
	button.MouseButton1Click:Connect(function()
		toggleFakeLag(not fakeLagEnabled)
	end)
	
end;
task.spawn(C_33);
-- ReplicatedFirst.ScreenGui.Fanta.drag
local function C_35()
local script = G2L["35"];
	-- Variables
	local frame = script.Parent -- The draggable menu frame (Fanta)
	local userInputService = game:GetService("UserInputService")
	
	-- Get references based on the new hierarchy
	local fovButton = frame:FindFirstChild("misTab") and frame.misTab:FindFirstChild("fov")
	local slider = fovButton and fovButton:FindFirstChild("slider")
	local sliderKnob = slider and slider:FindFirstChild("sliderKnob")
	
	-- Validate references
	if not fovButton then
		warn("fov button not found! Please ensure the button is named 'fov'.")
		return
	end
	
	if not slider then
		warn("slider not found! Please ensure the slider is inside the fov button.")
		return
	end
	
	if not sliderKnob then
		warn("sliderKnob not found! Please ensure the knob is inside the slider.")
		return
	end
	
	local dragging = false
	local dragStart = nil
	local startPos = nil
	local menuDraggingEnabled = true
	
	-- Function to begin dragging
	local function startDrag(input)
		if menuDraggingEnabled then
			dragging = true
			dragStart = input.Position
			startPos = frame.Position
		end
	end
	
	-- Function to stop dragging
	local function stopDrag()
		dragging = false
	end
	
	-- Function to update the position of the frame while dragging
	local function updateDrag(input)
		if dragging and input.Position then
			local delta = input.Position - dragStart
			frame.Position = UDim2.new(
				startPos.X.Scale,
				startPos.X.Offset + delta.X,
				startPos.Y.Scale,
				startPos.Y.Offset + delta.Y
			)
		end
	end
	
	-- Check if the mouse is over the sliderKnob
	local function isMouseOverSliderKnob(input)
		if not sliderKnob or not input.Position then
			return false -- If sliderKnob or input.Position is nil, return false
		end
	
		local knobPosition = sliderKnob.AbsolutePosition
		local knobSize = sliderKnob.AbsoluteSize
		local mousePosition = Vector2.new(input.Position.X, input.Position.Y)
	
		return mousePosition.X >= knobPosition.X and mousePosition.X <= knobPosition.X + knobSize.X and
			mousePosition.Y >= knobPosition.Y and mousePosition.Y <= knobPosition.Y + knobSize.Y
	end
	
	-- Handle input events
	frame.InputBegan:Connect(function(input, gameProcessed)
		if not gameProcessed and input.UserInputType == Enum.UserInputType.MouseButton1 then
			-- Check if the slider knob is clicked
			if isMouseOverSliderKnob(input) then
				menuDraggingEnabled = false
			else
				startDrag(input)
			end
		end
	end)
	
	frame.InputEnded:Connect(function(input)
		if input.UserInputType == Enum.UserInputType.MouseButton1 then
			stopDrag()
			menuDraggingEnabled = true
		end
	end)
	
	userInputService.InputChanged:Connect(function(input)
		if input.UserInputType == Enum.UserInputType.MouseMovement then
			updateDrag(input)
		end
	end)
	
end;
task.spawn(C_35);

return G2L["1"], require;
